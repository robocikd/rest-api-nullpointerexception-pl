import java.time.LocalDateTime

plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'pl.robocikd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.auth0:java-jwt:3.8.3'

    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

task generatePostsAndComments() {
    File dataSql = file("src/main/resources/data.sql")
    dataSql.write("");
    //posty
    for (int i = 1; i <= 100; i++) {
        dataSql.append("insert into post(title, content, created) values ('Test post ${i}','Content ${i}', '" + LocalDateTime.now().minusDays(100 - i) + "');\n")
    }
    //komentarze
    for (int i = 1; i <= 100; i++) {
        int postId = 1 + i / 10
        dataSql.append("insert into comment(post_id,content, created) values(${postId}, 'Comment ${i}','" + LocalDateTime.now().minusDays(100 - i) + "');\n")
    }
}
